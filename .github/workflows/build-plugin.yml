name: Build JUCE Plugin

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  macos:
    name: macOS (VST3/AU/Standalone)
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure (CMake)
        run: |
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
            -G "Xcode"

      - name: Build (Release)
        run: cmake --build build --config Release

      - name: Locate artefacts
        id: find_paths
        run: |
          set -e
          ARTE="build"/*"_artefacts"/Release
          echo "arte_dir=$ARTE" >> $GITHUB_OUTPUT
          echo "Found: $ARTE"
          ls -R "$ARTE" || true

      - name: Package artefacts
        run: |
          set -e
          ARTE="${{ steps.find_paths.outputs.arte_dir }}"
          mkdir -p upload
          # VST3
          if [ -d "$ARTE/VST3" ]; then
            for p in "$ARTE"/VST3/*.vst3 ; do
              [ -e "$p" ] || continue
              base="$(basename "$p" .vst3)"
              ditto -c -k --sequesterRsrc --keepParent "$p" "upload/${base}-macOS-vst3.zip"
            done
          fi
          # AU
          if [ -d "$ARTE/AU" ]; then
            for p in "$ARTE"/AU/*.component ; do
              [ -e "$p" ] || continue
              base="$(basename "$p" .component)"
              ditto -c -k --sequesterRsrc --keepParent "$p" "upload/${base}-macOS-au.zip"
            done
          fi
          # Standalone
          if [ -d "$ARTE/Standalone" ]; then
            for p in "$ARTE"/Standalone/*.app ; do
              [ -e "$p" ] || continue
              base="$(basename "$p" .app)"
              ditto -c -k --sequesterRsrc --keepParent "$p" "upload/${base}-macOS-standalone.zip"
            done
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macOS-builds
          path: upload/*

  windows:
    name: Windows (VST3/Standalone)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure (CMake)
        run: >
          cmake -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -G "Visual Studio 17 2022"
          -A x64

      - name: Build (Release)
        run: cmake --build build --config Release

      - name: Locate artefacts
        id: find_paths_win
        shell: pwsh
        run: |
          $arte = Get-ChildItem -Directory -Recurse build | Where-Object { $_.Name -like "*_artefacts" } | Select-Object -First 1
          if (-not $arte) { Write-Host "No artefacts dir"; exit 0 }
          $out = Join-Path $arte.FullName "Release"
          Write-Host "Found: $out"
          "arte_dir=$out" >> $env:GITHUB_OUTPUT

      - name: Package artefacts
        shell: pwsh
        run: |
          $arte = "${{ steps.find_paths_win.outputs.arte_dir }}"
          New-Item -ItemType Directory -Force -Path upload | Out-Null
          if (Test-Path "$arte/VST3") {
            Get-ChildItem "$arte/VST3" -Filter *.vst3 | ForEach-Object {
              $base = $_.BaseName
              Compress-Archive -Path $_.FullName -DestinationPath ("upload/{0}-windows-vst3.zip" -f $base)
            }
          }
          if (Test-Path "$arte/Standalone") {
            Get-ChildItem "$arte/Standalone" -Filter *.exe | ForEach-Object {
              $base = $_.BaseName
              Compress-Archive -Path $_.FullName -DestinationPath ("upload/{0}-windows-standalone.zip" -f $base)
            }
          }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: upload/*
